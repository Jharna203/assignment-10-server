[
    {
        "id": 1,
        "title": "What is cors? ",
        "desc" : "Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a 'preflight' request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request. An example of a cross-origin request: the front-end JavaScript code served from https://domain-a.com uses XMLHttpRequest to make a request for https://domain-b.com/data.json.For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts. For example, XMLHttpRequest and the Fetch API follow the same-origin policy. This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins includes the right CORS headers."
    },
    {
        "id": 2,
        "title": "Why are you using firebase?",
        "desc" : "Firebase, Backend-as-a-Service (BaaS), is a platform by Google that provides functionalities and helps with the backend development of your Android, iOS, or web and even some products that support Unity3D too.Top functionalities are: Firebase Database: used to store users data like chat messages, users details and other metadata.Firebase Cloud Storage: used to store user-generated content like the profile picture, multimedia messages, etc.Firebase Cloud Messaging: used to send notification.Firebase Remote Config: used to perform A/B testing on the go. The top Firebase products that I am addicted to are: Firebase Remote Config: I love this product; it actually saved me sometimes from going broke. Here I’ve already written enough about it why I love it since it allows you to modify the appearance and behavior of your app without letting users download your app. Firebase Database: The product I have been using from the very first day since it stores data as JSON and synchronized in realtime. Firebase Authentication: it has saved countless hours of my life since it allows to authenticates your app with the users."
    },
    {
        "id": 3,
        "title": "What other options do you have to implement authentication?",
        "desc" : "Authentication methods include something users know, something users have and something users are. Not every authentication type is created equal to protect the network, however; these authentication methods range from offering basic protection to stronger security. Using more than one method -- multifactor authentication (MFA) -- is recommended.1. Password-based authentication, 2. Two-factor/multifactor authentication, 3. Biometric authentication, 4. Single sign-on,5. Token-based authentication, 6. Certificate-based authentication."
    },
    {
        "id": 4,
        "title": "How does the private route work? ",
        "desc" : "Private Routes vary based on the Apps, For example, Dashboard, User Profile, App Settings, Home etc. In simple words, These routes can be accessed only after login. The constraints for Public and Private routes are that Public routes should not be accessed after login and Private routes should not be accessible before login. In this article, we can see. How to create public and private routes using react-router for your react apps. In react-router-dom version 6 there is no render prop for the Route component. You can also simplify your PrivateRoute wrapper component a bit, it doesn't need to render more Routes and Route components.Conditionally render the component's children or navigate to log in."
    },
    {
        "id": 5,
        "title": "What is Node?",
        "desc" : "Javascript has existed since 1995 and has since taken over as the dominant language for web development. For much of its life, JavaScript was used mainly for client-side scripting inside <script> tags executing in web browsers. This limitation meant that developers were often working in many different languages and frameworks between the front-end (client-side) and backend (server-side) aspects of a web application. Although there were other projects to bring JavaScript to server-side applications, the functionality took off with the launch of Node.js in 2009. Node allows developers to write JavaScript code that runs directly in a computer process itself instead of in a browser. Node can, therefore, be used to write server-side applications with access to the operating system, file system, and everything else required to build fully-functional applications.Node.js is written in C, C++, and JavaScript, and it is built on the open-source V8 JavaScript engine which also powers JS in browsers such as Google Chrome. As V8 supports new features in JavaScript, they are incorporated into Node."
    },
    {
        "id": 6,
        "title": "How does Node work?",
        "desc" : "Working of Node.js: Node.js accepts the request from the clients and sends the response, while working with the request node.js handles them with a single thread. To operate I/O operations or requests node.js use the concept of threads. Thread is a sequence of instructions that the server needs to perform. It runs parallel on the server to provide the information to multiple clients. Node.js is an event loop single-threaded language. It can handle concurrent requests with a single thread without blocking it for one request. Node.js basically works on two concept: Asynchronous, Non-blocking I/O .Non-blocking I/o: Non-blocking i/o  means working with multiple requests without blocking the thread for a single request. I/O basically interacts with external systems such as files, databases. Node.js is not used for CPU-intensive work means for calculations, video processing because a single thread cannot handle the CPU works.Asynchronous: Asynchronous is executing a callback function. The moment we get the response from the other server or database it will execute a callback function. Callback functions are called as soon as some work is finished and this is because the node.js uses an event-driven architecture. The single thread doesn’t work with the request instead it sends the request to another system which resolves the request and it is accessible for another request.To implement the concept of the system to handle the request  node.js uses the concept of Libuv.Libuv is an open-source library built-in C. It has a strong focus on asynchronous and  I/O, this gives node access to the underlying computer operating system, file system, and networking.Libuv implements two extremely important features of node.js: Event loop, Thread pool."
    }
]